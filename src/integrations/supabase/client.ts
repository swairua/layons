// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Read environment variables (support both process.env and import.meta.env)
const processEnv: any = typeof process !== 'undefined' ? (process.env as any) : undefined;
let metaEnv: any | undefined = undefined;
try {
  // import.meta may not be available in non-Vite environments; guard access
  // @ts-ignore
  metaEnv = (import.meta as any)?.env;
} catch (e) {
  metaEnv = undefined;
}

const SUPABASE_URL = (processEnv && (processEnv.NEXT_PUBLIC_SUPABASE_URL || processEnv.VITE_SUPABASE_URL)) || (metaEnv && (metaEnv.NEXT_PUBLIC_SUPABASE_URL || metaEnv.VITE_SUPABASE_URL)) || '';
const SUPABASE_PUBLISHABLE_KEY = (processEnv && (processEnv.NEXT_PUBLIC_SUPABASE_ANON_KEY || processEnv.VITE_SUPABASE_ANON_KEY)) || (metaEnv && (metaEnv.NEXT_PUBLIC_SUPABASE_ANON_KEY || metaEnv.VITE_SUPABASE_ANON_KEY)) || '';

// Warn instead of throwing at import time to avoid breaking SSR or tooling that imports this module
if (!SUPABASE_URL) {
  console.warn('Supabase URL is not set. Set NEXT_PUBLIC_SUPABASE_URL or VITE_SUPABASE_URL.');
}
if (!SUPABASE_PUBLISHABLE_KEY) {
  console.warn('Supabase publishable key is not set. Set NEXT_PUBLIC_SUPABASE_ANON_KEY or VITE_SUPABASE_ANON_KEY.');
}

// If the project changed, clear any cached credentials from localStorage
if (typeof window !== 'undefined' && SUPABASE_URL) {
  try {
    const projectRef = new URL(SUPABASE_URL).host.split('.')[0];
    const storedRefKey = 'sb-project-ref';
    const prevRef = localStorage.getItem(storedRefKey);
    if (prevRef && prevRef !== projectRef) {
      const keysToRemove: string[] = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && (key.includes('supabase') || key.includes('auth') || key.includes(prevRef))) {
          keysToRemove.push(key);
        }
      }
      keysToRemove.forEach(k => localStorage.removeItem(k));
    }
    localStorage.setItem(storedRefKey, projectRef);
  } catch (err) {
    // don't block app startup
    // eslint-disable-next-line no-console
    console.warn('Failed to clear previous Supabase keys:', err);
  }
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});
