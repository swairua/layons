// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Read environment variables (no hardcoded fallbacks)
const SUPABASE_URL = import.meta.env.NEXT_PUBLIC_SUPABASE_URL ?? import.meta.env.VITE_SUPABASE_URL;
const SUPABASE_PUBLISHABLE_KEY = import.meta.env.NEXT_PUBLIC_SUPABASE_ANON_KEY ?? import.meta.env.VITE_SUPABASE_ANON_KEY;

// Validate that we have valid values
if (!SUPABASE_URL || SUPABASE_URL === 'undefined') {
  throw new Error('Supabase URL is required but not found in environment variables.');
}

if (!SUPABASE_PUBLISHABLE_KEY || SUPABASE_PUBLISHABLE_KEY === 'undefined') {
  throw new Error('Supabase publishable key is required but not found in environment variables.');
}

// If the project changed, clear any cached credentials from localStorage
if (typeof window !== 'undefined') {
  try {
    const projectRef = new URL(SUPABASE_URL).host.split('.')[0];
    const storedRefKey = 'sb-project-ref';
    const prevRef = localStorage.getItem(storedRefKey);
    if (prevRef && prevRef !== projectRef) {
      const keysToRemove: string[] = [];
      for (let i = 0; i < localStorage.length; i++) {
        const key = localStorage.key(i);
        if (key && (key.includes('supabase') || key.includes('auth') || key.includes(prevRef))) {
          keysToRemove.push(key);
        }
      }
      keysToRemove.forEach(k => localStorage.removeItem(k));
    }
    localStorage.setItem(storedRefKey, projectRef);
  } catch {}
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});
